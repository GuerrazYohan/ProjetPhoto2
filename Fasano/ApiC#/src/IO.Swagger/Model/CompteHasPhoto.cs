/* 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CompteHasPhoto
    /// </summary>
    [DataContract]
        public partial class CompteHasPhoto :  IEquatable<CompteHasPhoto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CompteHasPhoto" /> class.
        /// </summary>
        /// <param name="compteIdcompte">compteIdcompte.</param>
        /// <param name="evenementsIdevenements">evenementsIdevenements.</param>
        /// <param name="photoIdphoto">photoIdphoto.</param>
        public CompteHasPhoto(string compteIdcompte = default(string), string evenementsIdevenements = default(string), string photoIdphoto = default(string))
        {
            this.CompteIdcompte = compteIdcompte;
            this.EvenementsIdevenements = evenementsIdevenements;
            this.PhotoIdphoto = photoIdphoto;
        }
        
        /// <summary>
        /// Gets or Sets CompteIdcompte
        /// </summary>
        [DataMember(Name="compteIdcompte", EmitDefaultValue=false)]
        public string CompteIdcompte { get; set; }

        /// <summary>
        /// Gets or Sets EvenementsIdevenements
        /// </summary>
        [DataMember(Name="evenementsIdevenements", EmitDefaultValue=false)]
        public string EvenementsIdevenements { get; set; }

        /// <summary>
        /// Gets or Sets PhotoIdphoto
        /// </summary>
        [DataMember(Name="photoIdphoto", EmitDefaultValue=false)]
        public string PhotoIdphoto { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CompteHasPhoto {\n");
            sb.Append("  CompteIdcompte: ").Append(CompteIdcompte).Append("\n");
            sb.Append("  EvenementsIdevenements: ").Append(EvenementsIdevenements).Append("\n");
            sb.Append("  PhotoIdphoto: ").Append(PhotoIdphoto).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CompteHasPhoto);
        }

        /// <summary>
        /// Returns true if CompteHasPhoto instances are equal
        /// </summary>
        /// <param name="input">Instance of CompteHasPhoto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CompteHasPhoto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CompteIdcompte == input.CompteIdcompte ||
                    (this.CompteIdcompte != null &&
                    this.CompteIdcompte.Equals(input.CompteIdcompte))
                ) && 
                (
                    this.EvenementsIdevenements == input.EvenementsIdevenements ||
                    (this.EvenementsIdevenements != null &&
                    this.EvenementsIdevenements.Equals(input.EvenementsIdevenements))
                ) && 
                (
                    this.PhotoIdphoto == input.PhotoIdphoto ||
                    (this.PhotoIdphoto != null &&
                    this.PhotoIdphoto.Equals(input.PhotoIdphoto))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CompteIdcompte != null)
                    hashCode = hashCode * 59 + this.CompteIdcompte.GetHashCode();
                if (this.EvenementsIdevenements != null)
                    hashCode = hashCode * 59 + this.EvenementsIdevenements.GetHashCode();
                if (this.PhotoIdphoto != null)
                    hashCode = hashCode * 59 + this.PhotoIdphoto.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
