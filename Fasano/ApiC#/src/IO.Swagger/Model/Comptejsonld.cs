/* 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Compte
    /// </summary>
    [DataContract]
        public partial class Comptejsonld :  IEquatable<Comptejsonld>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Comptejsonld" /> class.
        /// </summary>
        /// <param name="nom">nom.</param>
        /// <param name="prenom">prenom.</param>
        /// <param name="motdepasse">motdepasse.</param>
        /// <param name="email">email.</param>
        public Comptejsonld(string nom = default(string), string prenom = default(string), string motdepasse = default(string), string email = default(string))
        {
            this.Nom = nom;
            this.Prenom = prenom;
            this.Motdepasse = motdepasse;
            this.Email = email;
        }
        
        /// <summary>
        /// Gets or Sets Context
        /// </summary>
        [DataMember(Name="@context", EmitDefaultValue=false)]
        public string Context { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="@id", EmitDefaultValue=false)]
        public string Id { get; private set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="@type", EmitDefaultValue=false)]
        public string Type { get; private set; }

        /// <summary>
        /// Gets or Sets Idcompte
        /// </summary>
        [DataMember(Name="idcompte", EmitDefaultValue=false)]
        public int? Idcompte { get; private set; }

        /// <summary>
        /// Gets or Sets Nom
        /// </summary>
        [DataMember(Name="nom", EmitDefaultValue=false)]
        public string Nom { get; set; }

        /// <summary>
        /// Gets or Sets Prenom
        /// </summary>
        [DataMember(Name="prenom", EmitDefaultValue=false)]
        public string Prenom { get; set; }

        /// <summary>
        /// Gets or Sets Motdepasse
        /// </summary>
        [DataMember(Name="motdepasse", EmitDefaultValue=false)]
        public string Motdepasse { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Comptejsonld {\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Idcompte: ").Append(Idcompte).Append("\n");
            sb.Append("  Nom: ").Append(Nom).Append("\n");
            sb.Append("  Prenom: ").Append(Prenom).Append("\n");
            sb.Append("  Motdepasse: ").Append(Motdepasse).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Comptejsonld);
        }

        /// <summary>
        /// Returns true if Comptejsonld instances are equal
        /// </summary>
        /// <param name="input">Instance of Comptejsonld to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Comptejsonld input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Context == input.Context ||
                    (this.Context != null &&
                    this.Context.Equals(input.Context))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Idcompte == input.Idcompte ||
                    (this.Idcompte != null &&
                    this.Idcompte.Equals(input.Idcompte))
                ) && 
                (
                    this.Nom == input.Nom ||
                    (this.Nom != null &&
                    this.Nom.Equals(input.Nom))
                ) && 
                (
                    this.Prenom == input.Prenom ||
                    (this.Prenom != null &&
                    this.Prenom.Equals(input.Prenom))
                ) && 
                (
                    this.Motdepasse == input.Motdepasse ||
                    (this.Motdepasse != null &&
                    this.Motdepasse.Equals(input.Motdepasse))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Context != null)
                    hashCode = hashCode * 59 + this.Context.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Idcompte != null)
                    hashCode = hashCode * 59 + this.Idcompte.GetHashCode();
                if (this.Nom != null)
                    hashCode = hashCode * 59 + this.Nom.GetHashCode();
                if (this.Prenom != null)
                    hashCode = hashCode * 59 + this.Prenom.GetHashCode();
                if (this.Motdepasse != null)
                    hashCode = hashCode * 59 + this.Motdepasse.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
