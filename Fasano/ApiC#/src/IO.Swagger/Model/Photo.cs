/* 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Photo
    /// </summary>
    [DataContract]
        public partial class Photo :  IEquatable<Photo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Photo" /> class.
        /// </summary>
        /// <param name="chemindacces">chemindacces.</param>
        /// <param name="rawbytesqr">rawbytesqr.</param>
        public Photo(string chemindacces = default(string), string rawbytesqr = default(string))
        {
            this.Chemindacces = chemindacces;
            this.Rawbytesqr = rawbytesqr;
        }
        
        /// <summary>
        /// Gets or Sets Idphoto
        /// </summary>
        [DataMember(Name="idphoto", EmitDefaultValue=false)]
        public int? Idphoto { get; private set; }

        /// <summary>
        /// Gets or Sets Chemindacces
        /// </summary>
        [DataMember(Name="chemindacces", EmitDefaultValue=false)]
        public string Chemindacces { get; set; }

        /// <summary>
        /// Gets or Sets Rawbytesqr
        /// </summary>
        [DataMember(Name="rawbytesqr", EmitDefaultValue=false)]
        public string Rawbytesqr { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Photo {\n");
            sb.Append("  Idphoto: ").Append(Idphoto).Append("\n");
            sb.Append("  Chemindacces: ").Append(Chemindacces).Append("\n");
            sb.Append("  Rawbytesqr: ").Append(Rawbytesqr).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Photo);
        }

        /// <summary>
        /// Returns true if Photo instances are equal
        /// </summary>
        /// <param name="input">Instance of Photo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Photo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Idphoto == input.Idphoto ||
                    (this.Idphoto != null &&
                    this.Idphoto.Equals(input.Idphoto))
                ) && 
                (
                    this.Chemindacces == input.Chemindacces ||
                    (this.Chemindacces != null &&
                    this.Chemindacces.Equals(input.Chemindacces))
                ) && 
                (
                    this.Rawbytesqr == input.Rawbytesqr ||
                    (this.Rawbytesqr != null &&
                    this.Rawbytesqr.Equals(input.Rawbytesqr))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Idphoto != null)
                    hashCode = hashCode * 59 + this.Idphoto.GetHashCode();
                if (this.Chemindacces != null)
                    hashCode = hashCode * 59 + this.Chemindacces.GetHashCode();
                if (this.Rawbytesqr != null)
                    hashCode = hashCode * 59 + this.Rawbytesqr.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
