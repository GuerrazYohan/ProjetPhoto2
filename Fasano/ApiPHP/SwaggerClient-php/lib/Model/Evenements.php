<?php
/**
 * Evenements
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.16
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Evenements Class Doc Comment
 *
 * @category Class
 * @description Evenements
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Evenements implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Evenements';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'idevenements' => 'int',
'nom' => 'string',
'datedebut' => '\DateTime',
'datedefin' => '\DateTime',
'motdepasseevent' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'idevenements' => null,
'nom' => null,
'datedebut' => 'date-time',
'datedefin' => 'date-time',
'motdepasseevent' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'idevenements' => 'idevenements',
'nom' => 'nom',
'datedebut' => 'datedebut',
'datedefin' => 'datedefin',
'motdepasseevent' => 'motdepasseevent'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'idevenements' => 'setIdevenements',
'nom' => 'setNom',
'datedebut' => 'setDatedebut',
'datedefin' => 'setDatedefin',
'motdepasseevent' => 'setMotdepasseevent'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'idevenements' => 'getIdevenements',
'nom' => 'getNom',
'datedebut' => 'getDatedebut',
'datedefin' => 'getDatedefin',
'motdepasseevent' => 'getMotdepasseevent'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['idevenements'] = isset($data['idevenements']) ? $data['idevenements'] : null;
        $this->container['nom'] = isset($data['nom']) ? $data['nom'] : null;
        $this->container['datedebut'] = isset($data['datedebut']) ? $data['datedebut'] : null;
        $this->container['datedefin'] = isset($data['datedefin']) ? $data['datedefin'] : null;
        $this->container['motdepasseevent'] = isset($data['motdepasseevent']) ? $data['motdepasseevent'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets idevenements
     *
     * @return int
     */
    public function getIdevenements()
    {
        return $this->container['idevenements'];
    }

    /**
     * Sets idevenements
     *
     * @param int $idevenements idevenements
     *
     * @return $this
     */
    public function setIdevenements($idevenements)
    {
        $this->container['idevenements'] = $idevenements;

        return $this;
    }

    /**
     * Gets nom
     *
     * @return string
     */
    public function getNom()
    {
        return $this->container['nom'];
    }

    /**
     * Sets nom
     *
     * @param string $nom nom
     *
     * @return $this
     */
    public function setNom($nom)
    {
        $this->container['nom'] = $nom;

        return $this;
    }

    /**
     * Gets datedebut
     *
     * @return \DateTime
     */
    public function getDatedebut()
    {
        return $this->container['datedebut'];
    }

    /**
     * Sets datedebut
     *
     * @param \DateTime $datedebut datedebut
     *
     * @return $this
     */
    public function setDatedebut($datedebut)
    {
        $this->container['datedebut'] = $datedebut;

        return $this;
    }

    /**
     * Gets datedefin
     *
     * @return \DateTime
     */
    public function getDatedefin()
    {
        return $this->container['datedefin'];
    }

    /**
     * Sets datedefin
     *
     * @param \DateTime $datedefin datedefin
     *
     * @return $this
     */
    public function setDatedefin($datedefin)
    {
        $this->container['datedefin'] = $datedefin;

        return $this;
    }

    /**
     * Gets motdepasseevent
     *
     * @return string
     */
    public function getMotdepasseevent()
    {
        return $this->container['motdepasseevent'];
    }

    /**
     * Sets motdepasseevent
     *
     * @param string $motdepasseevent motdepasseevent
     *
     * @return $this
     */
    public function setMotdepasseevent($motdepasseevent)
    {
        $this->container['motdepasseevent'] = $motdepasseevent;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
